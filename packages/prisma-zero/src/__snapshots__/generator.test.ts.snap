// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Generator > Schema Generation > should generate correct schema for basic model 1`] = `
"// Generated by Zero Schema Generator

import { createSchema, definePermissions, Row, column } from "@rocicorp/zero";

const { enumeration } = column;

// Define schemas

const UserSchema = {
  tableName: "User",
  columns: {
    id: "string",
    name: "string",
    email: "string",
    age: { type: "number", optional: true },
  },
  primaryKey: "id",
} as const;

// Define schema

export const schema = createSchema({
  version: 1,
  tables: {
    User: UserSchema,
  },
});

// Define types
export type Schema = typeof schema;
export type User = Row<typeof UserSchema>;

// Define permissions

// Important: currently no permissions are generated so evey operation is allowed!


export const permissions = definePermissions(schema, () => ({}));

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 39e9a6851c0a6d2a9e610b80c7b3c979c237c4f921f37571491153d83c2eca82
"
`;

exports[`Generator > Schema Generation > should handle enums correctly 1`] = `
"// Generated by Zero Schema Generator

import { createSchema, definePermissions, Row, column } from "@rocicorp/zero";

const { enumeration } = column;

// Define enums

export enum Role {
  USER = "USER",
  ADMIN = "ADMIN",
}

// Define schemas

const UserSchema = {
  tableName: "User",
  columns: {
    id: "string",
    role: enumeration<Role>(),
  },
  primaryKey: "id",
} as const;

// Define schema

export const schema = createSchema({
  version: 1,
  tables: {
    User: UserSchema,
  },
});

// Define types
export type Schema = typeof schema;
export type User = Row<typeof UserSchema>;

// Define permissions

// Important: currently no permissions are generated so evey operation is allowed!


export const permissions = definePermissions(schema, () => ({}));

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 1769528a165c494f19172ce090f95266b4b3473d762f8c3187da6d187eb5d61d
"
`;

exports[`Generator > Schema Generation > should handle relationships correctly 1`] = `
"// Generated by Zero Schema Generator

import { createSchema, definePermissions, Row, column } from "@rocicorp/zero";

const { enumeration } = column;

// Define schemas

const UserSchema = {
  tableName: "User",
  columns: {
    id: "string",
  },
  relationships: {
    posts: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => PostSchema,
    }
  },
  primaryKey: "id",
} as const;

const PostSchema = {
  tableName: "Post",
  columns: {
    id: "string",
  },
  relationships: {
    userId: {
      sourceField: "userId",
      destField: "id",
      destSchema: () => StringSchema,
    },
    user: {
      sourceField: "userId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: "id",
} as const;

// Define schema

export const schema = createSchema({
  version: 1,
  tables: {
    User: UserSchema,
    Post: PostSchema,
  },
});

// Define types
export type Schema = typeof schema;
export type User = Row<typeof UserSchema>;
export type Post = Row<typeof PostSchema>;

// Define permissions

// Important: currently no permissions are generated so evey operation is allowed!


export const permissions = definePermissions(schema, () => ({}));

// DO NOT TOUCH THIS. The schema hash is used to determine if the schema has changed and correctly update the version.
// Schema hash: 0e7d51a81b828c897fe0a887aa6bdc1d94e1706d5566ec51ee8e0bd9ce6099cc
"
`;
