// Generated by @vxrn/prisma-zero

import { createSchema, type Row, column } from '@rocicorp/zero'

const { enumeration } = column;

// Define schemas

const UserSchema = {
  tableName: "User",
  columns: {
    id: "string",
    username: { type: "string", optional: true },
    name: { type: "string", optional: true },
    email: "string",
    state: { type: "json", optional: true },
    updatedAt: "number",
    emailVerified: "boolean",
    image: { type: "string", optional: true },
    createdAt: "number",
    roleId: { type: "string", optional: true },
  },
  relationships: {
    friendshipsRequested: {
      sourceField: "id",
      destField: "requestingId",
      destSchema: () => FriendshipSchema,
    },
    friendshipsAccepted: {
      sourceField: "id",
      destField: "acceptingId",
      destSchema: () => FriendshipSchema,
    },
    serversCreated: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => ServerSchema,
    },
    serverMemberships: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => ServerMemberSchema,
    },
    rolesCreated: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => RoleSchema,
    },
    messages: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => MessageSchema,
    },
    pins: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => PinSchema,
    },
    attachments: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => AttachmentSchema,
    },
    messageReactions: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => MessageReactionSchema,
    },
    sessions: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => SessionSchema,
    },
    accounts: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => AccountSchema,
    },
    ChannelPermission: {
      sourceField: "id",
      destField: "granterId",
      destSchema: () => ChannelPermissionSchema,
    },
    Thread: {
      sourceField: "id",
      destField: "creatorId",
      destSchema: () => ThreadSchema,
    },
    Role: {
      sourceField: "roleId",
      destField: "id",
      destSchema: () => RoleSchema,
    },
    UserRole: {
      sourceField: "id",
      destField: "userId",
      destSchema: () => UserRoleSchema,
    },
    roles: {
      sourceField: "id",
      destField: "id",
      destSchema: () => RoleSchema,
    },
    granter: {
      sourceField: "id",
      destField: "granterId",
      destSchema: () => UserRoleSchema,
    }
  },
  primaryKey: "id",
} as const;

const FriendshipSchema = {
  tableName: "Friendship",
  columns: {
    requestingId: "string",
    acceptingId: "string",
    accepted: "boolean",
    createdAt: "number",
  },
  relationships: {
    requestingUser: {
      sourceField: "requestingId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    acceptingUser: {
      sourceField: "acceptingId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: ["requestingId","acceptingId"],
} as const;

const ServerSchema = {
  tableName: "Server",
  columns: {
    id: "string",
    name: "string",
    creatorId: "string",
    description: { type: "string", optional: true },
    channelSort: { type: "json", optional: true },
    icon: { type: "string", optional: true },
    updatedAt: { type: "number", optional: true },
    createdAt: "number",
  },
  relationships: {
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    members: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => ServerMemberSchema,
    },
    channels: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => ChannelSchema,
    },
    roles: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => RoleSchema,
    },
    UserRole: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => UserRoleSchema,
    },
    ChannelPermission: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => ChannelPermissionSchema,
    },
    Message: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => MessageSchema,
    },
    Pin: {
      sourceField: "id",
      destField: "serverId",
      destSchema: () => PinSchema,
    }
  },
  primaryKey: "id",
} as const;

const ServerMemberSchema = {
  tableName: "ServerMember",
  columns: {
    serverId: "string",
    userId: "string",
    hasClosedWelcome: "boolean",
    joinedAt: "number",
  },
  relationships: {
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    user: {
      sourceField: "userId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: ["serverId","userId"],
} as const;

const RoleSchema = {
  tableName: "Role",
  columns: {
    id: "string",
    serverId: "string",
    creatorId: "string",
    name: "string",
    color: "string",
    canAdmin: "boolean",
    canEditServer: "boolean",
    canEditChannel: "boolean",
    updatedAt: { type: "number", optional: true },
    createdAt: "number",
  },
  relationships: {
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    members: {
      sourceField: "id",
      destField: "id",
      destSchema: () => UserSchema,
    },
    UserRole: {
      sourceField: "id",
      destField: "roleId",
      destSchema: () => UserRoleSchema,
    },
    ChannelPermission: {
      sourceField: "id",
      destField: "roleId",
      destSchema: () => ChannelPermissionSchema,
    },
    User: {
      sourceField: "id",
      destField: "roleId",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: "id",
} as const;

const ChannelSchema = {
  tableName: "Channel",
  columns: {
    id: "string",
    serverId: "string",
    name: "string",
    description: { type: "string", optional: true },
    private: "boolean",
    updatedAt: { type: "number", optional: true },
    createdAt: "number",
  },
  relationships: {
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    threads: {
      sourceField: "id",
      destField: "channelId",
      destSchema: () => ThreadSchema,
    },
    messages: {
      sourceField: "id",
      destField: "channelId",
      destSchema: () => MessageSchema,
    },
    pins: {
      sourceField: "id",
      destField: "channelId",
      destSchema: () => PinSchema,
    },
    channelPermissions: {
      sourceField: "id",
      destField: "channelId",
      destSchema: () => ChannelPermissionSchema,
    },
    Attachment: {
      sourceField: "id",
      destField: "channelId",
      destSchema: () => AttachmentSchema,
    }
  },
  primaryKey: "id",
} as const;

const UserRoleSchema = {
  tableName: "UserRole",
  columns: {
    serverId: "string",
    userId: "string",
    roleId: "string",
    granterId: "string",
    createdAt: "number",
  },
  relationships: {
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    role: {
      sourceField: "roleId",
      destField: "id",
      destSchema: () => RoleSchema,
    },
    granter: {
      sourceField: "granterId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    User: {
      sourceField: "userId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: ["serverId","userId","roleId"],
} as const;

const ChannelPermissionSchema = {
  tableName: "ChannelPermission",
  columns: {
    id: "string",
    channelId: "string",
    serverId: "string",
    roleId: "string",
    granterId: "string",
    createdAt: "number",
  },
  relationships: {
    channel: {
      sourceField: "channelId",
      destField: "id",
      destSchema: () => ChannelSchema,
    },
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    role: {
      sourceField: "roleId",
      destField: "id",
      destSchema: () => RoleSchema,
    },
    granter: {
      sourceField: "granterId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: "id",
} as const;

const ThreadSchema = {
  tableName: "Thread",
  columns: {
    id: "string",
    channelId: "string",
    messageId: { type: "string", optional: true },
    creatorId: "string",
    title: { type: "string", optional: true },
    deleted: "boolean",
    description: { type: "string", optional: true },
    updatedAt: { type: "number", optional: true },
    createdAt: "number",
  },
  relationships: {
    channel: {
      sourceField: "channelId",
      destField: "id",
      destSchema: () => ChannelSchema,
    },
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    messages: {
      sourceField: "id",
      destField: "threadId",
      destSchema: () => MessageSchema,
    }
  },
  primaryKey: "id",
} as const;

const MessageSchema = {
  tableName: "Message",
  columns: {
    id: "string",
    serverId: "string",
    channelId: "string",
    replyingToId: { type: "string", optional: true },
    threadId: { type: "string", optional: true },
    creatorId: "string",
    content: "string",
    isThreadReply: "boolean",
    createdAt: "number",
    updatedAt: { type: "number", optional: true },
    deleted: "boolean",
    messageId: { type: "string", optional: true },
  },
  relationships: {
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    channel: {
      sourceField: "channelId",
      destField: "id",
      destSchema: () => ChannelSchema,
    },
    thread: {
      sourceField: "threadId",
      destField: "id",
      destSchema: () => ThreadSchema,
    },
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    replyingTo: {
      sourceField: "replyingToId",
      destField: "id",
      destSchema: () => MessageSchema,
    },
    pins: {
      sourceField: "id",
      destField: "messageId",
      destSchema: () => PinSchema,
    },
    attachments: {
      sourceField: "id",
      destField: "messageId",
      destSchema: () => AttachmentSchema,
    },
    reactions: {
      sourceField: "id",
      destField: "messageId",
      destSchema: () => MessageReactionSchema,
    },
    Message: {
      sourceField: "id",
      destField: "replyingToId",
      destSchema: () => MessageSchema,
    }
  },
  primaryKey: "id",
} as const;

const PinSchema = {
  tableName: "Pin",
  columns: {
    id: "string",
    channelId: "string",
    serverId: "string",
    messageId: "string",
    creatorId: "string",
    createdAt: "number",
  },
  relationships: {
    channel: {
      sourceField: "channelId",
      destField: "id",
      destSchema: () => ChannelSchema,
    },
    server: {
      sourceField: "serverId",
      destField: "id",
      destSchema: () => ServerSchema,
    },
    message: {
      sourceField: "messageId",
      destField: "id",
      destSchema: () => MessageSchema,
    },
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    }
  },
  primaryKey: "id",
} as const;

const AttachmentSchema = {
  tableName: "Attachment",
  columns: {
    id: "string",
    userId: "string",
    messageId: { type: "string", optional: true },
    channelId: { type: "string", optional: true },
    createdAt: "number",
    data: { type: "string", optional: true },
    url: { type: "string", optional: true },
    type: "string",
  },
  relationships: {
    user: {
      sourceField: "userId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    message: {
      sourceField: "messageId",
      destField: "id",
      destSchema: () => MessageSchema,
    },
    channel: {
      sourceField: "channelId",
      destField: "id",
      destSchema: () => ChannelSchema,
    }
  },
  primaryKey: "id",
} as const;

const ReactionSchema = {
  tableName: "Reaction",
  columns: {
    id: "string",
    value: "string",
    keyword: "string",
    createdAt: "number",
    updatedAt: { type: "number", optional: true },
  },
  relationships: {
    messageReactions: {
      sourceField: "id",
      destField: "reactionId",
      destSchema: () => MessageReactionSchema,
    }
  },
  primaryKey: "id",
} as const;

const MessageReactionSchema = {
  tableName: "MessageReaction",
  columns: {
    messageId: "string",
    creatorId: "string",
    reactionId: "string",
    createdAt: "number",
    updatedAt: { type: "number", optional: true },
  },
  relationships: {
    message: {
      sourceField: "messageId",
      destField: "id",
      destSchema: () => MessageSchema,
    },
    creator: {
      sourceField: "creatorId",
      destField: "id",
      destSchema: () => UserSchema,
    },
    reaction: {
      sourceField: "reactionId",
      destField: "id",
      destSchema: () => ReactionSchema,
    }
  },
  primaryKey: ["messageId","creatorId","reactionId"],
} as const;

// Define schema

export const schema = createSchema({
  version: 1,
  tables: {
    User: UserSchema,
    Friendship: FriendshipSchema,
    Server: ServerSchema,
    ServerMember: ServerMemberSchema,
    Role: RoleSchema,
    Channel: ChannelSchema,
    UserRole: UserRoleSchema,
    ChannelPermission: ChannelPermissionSchema,
    Thread: ThreadSchema,
    Message: MessageSchema,
    Pin: PinSchema,
    Attachment: AttachmentSchema,
    Reaction: ReactionSchema,
    MessageReaction: MessageReactionSchema,
  },
});

// Define types
export type Schema = typeof schema;
export type User = Row<typeof UserSchema>;
export type Friendship = Row<typeof FriendshipSchema>;
export type Server = Row<typeof ServerSchema>;
export type ServerMember = Row<typeof ServerMemberSchema>;
export type Role = Row<typeof RoleSchema>;
export type Channel = Row<typeof ChannelSchema>;
export type UserRole = Row<typeof UserRoleSchema>;
export type ChannelPermission = Row<typeof ChannelPermissionSchema>;
export type Thread = Row<typeof ThreadSchema>;
export type Message = Row<typeof MessageSchema>;
export type Pin = Row<typeof PinSchema>;
export type Attachment = Row<typeof AttachmentSchema>;
export type Reaction = Row<typeof ReactionSchema>;
export type MessageReaction = Row<typeof MessageReactionSchema>;
// Schema hash: c17c113c5c959a61eb96fa72a0bf1da2bac322b5464982bd870039f31eb698ae
