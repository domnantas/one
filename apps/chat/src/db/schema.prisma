generator client {
  provider = "prisma-client-js"
}

generator zero {
  provider       = "prisma-generator-zero"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  username      String?  @db.VarChar(200)
  name          String?  @db.VarChar(200)
  email         String   @unique @db.VarChar(200)
  state         Json?    @default("{}")
  updatedAt     DateTime @default(now())
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())

  // relations
  friendshipsRequested Friendship[]        @relation("requestingUser")
  friendshipsAccepted  Friendship[]        @relation("acceptingUser")
  serversCreated       Server[]            @relation("creator")
  serverMemberships    ServerMember[]
  rolesCreated         Role[]              @relation("creator")
  messages             Message[]
  pins                 Pin[]
  attachments          Attachment[]
  messageReactions     MessageReaction[]
  sessions             Session[]
  accounts             Account[]
  roleId               String?             @db.VarChar
  ChannelPermission    ChannelPermission[]
  Thread               Thread[]
  Role                 Role?               @relation(fields: [roleId], references: [id])
  UserRole             UserRole[]
  roles                Role[]              @relation("UserRole")

  granter UserRole[] @relation("UserRoleGranter")
}

model Friendship {
  requestingId String   @db.VarChar
  acceptingId  String   @db.VarChar
  accepted     Boolean  @default(false)
  createdAt    DateTime @default(now())

  // relations
  requestingUser User @relation("requestingUser", fields: [requestingId], references: [id])
  acceptingUser  User @relation("acceptingUser", fields: [acceptingId], references: [id])

  @@id([requestingId, acceptingId])
}

model Server {
  id          String    @id @db.VarChar
  name        String    @db.VarChar(200)
  creatorId   String    @db.VarChar
  description String?
  channelSort Json?     @default("{}")
  icon        String?   @db.VarChar(255)
  updatedAt   DateTime?
  createdAt   DateTime  @default(now())

  // relations
  creator           User                @relation("creator", fields: [creatorId], references: [id])
  members           ServerMember[]
  channels          Channel[]
  roles             Role[]
  UserRole          UserRole[]
  ChannelPermission ChannelPermission[]
  Message           Message[]
  Pin               Pin[]
}

model ServerMember {
  serverId         String   @db.VarChar
  userId           String   @db.VarChar
  hasClosedWelcome Boolean  @default(false)
  joinedAt         DateTime @default(now())

  // relations
  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([serverId, userId])
}

model Role {
  id             String    @id @db.VarChar
  serverId       String    @db.VarChar
  creatorId      String    @db.VarChar
  name           String    @db.VarChar(200)
  color          String    @db.VarChar(200)
  canAdmin       Boolean   @default(false)
  canEditServer  Boolean   @default(false)
  canEditChannel Boolean   @default(false)
  updatedAt      DateTime?
  createdAt      DateTime  @default(now())

  // relations
  server            Server              @relation(fields: [serverId], references: [id])
  creator           User                @relation("creator", fields: [creatorId], references: [id])
  members           User[]              @relation("UserRole")
  UserRole          UserRole[]
  ChannelPermission ChannelPermission[]
  User              User[]
}

model Channel {
  id          String    @id @db.VarChar
  serverId    String    @db.VarChar
  name        String    @db.VarChar(200)
  description String?
  private     Boolean   @default(false)
  updatedAt   DateTime?
  createdAt   DateTime  @default(now())

  // relations
  server             Server              @relation(fields: [serverId], references: [id])
  threads            Thread[]
  messages           Message[]
  pins               Pin[]
  channelPermissions ChannelPermission[]
  Attachment         Attachment[]
}

model UserRole {
  serverId  String   @db.VarChar
  userId    String   @db.VarChar
  roleId    String   @db.VarChar
  granterId String   @db.VarChar
  createdAt DateTime @default(now())

  // relations
  server  Server @relation(fields: [serverId], references: [id])
  role    Role   @relation(fields: [roleId], references: [id])
  granter User   @relation("UserRoleGranter", fields: [granterId], references: [id])
  User    User   @relation(fields: [userId], references: [id])

  @@id([serverId, userId, roleId])
}

model ChannelPermission {
  id        String   @id @db.VarChar
  channelId String   @db.VarChar
  serverId  String   @db.VarChar
  roleId    String   @db.VarChar
  granterId String   @db.VarChar
  createdAt DateTime @default(now())

  // relations
  channel Channel @relation(fields: [channelId], references: [id])
  server  Server  @relation(fields: [serverId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])
  granter User    @relation(fields: [granterId], references: [id])
}

model Thread {
  id          String    @id @db.VarChar
  channelId   String    @db.VarChar
  messageId   String?   @db.VarChar
  creatorId   String    @db.VarChar
  title       String?   @db.VarChar(200)
  deleted     Boolean   @default(false)
  description String?   @db.VarChar(200)
  updatedAt   DateTime?
  createdAt   DateTime  @default(now())

  // relations
  channel  Channel   @relation(fields: [channelId], references: [id])
  creator  User      @relation(fields: [creatorId], references: [id])
  messages Message[]
}

model Message {
  id            String    @id @db.VarChar
  serverId      String    @db.VarChar
  channelId     String    @db.VarChar
  replyingToId  String?   @db.VarChar
  threadId      String?   @db.VarChar
  creatorId     String    @db.VarChar
  content       String
  isThreadReply Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deleted       Boolean   @default(false)

  // relations
  server      Server            @relation(fields: [serverId], references: [id])
  channel     Channel           @relation(fields: [channelId], references: [id])
  thread      Thread?           @relation(fields: [threadId], references: [id])
  creator     User              @relation(fields: [creatorId], references: [id])
  replyingTo  Message?          @relation("MessageReplies", fields: [replyingToId], references: [id])
  pins        Pin[]
  attachments Attachment[]
  reactions   MessageReaction[]
  messageId   String?           @db.VarChar

  Message Message[] @relation("MessageReplies")
}

model Pin {
  id        String   @id @db.VarChar
  channelId String   @db.VarChar
  serverId  String   @db.VarChar
  messageId String   @db.VarChar
  creatorId String   @db.VarChar
  createdAt DateTime @default(now())

  // relations
  channel Channel @relation(fields: [channelId], references: [id])
  server  Server  @relation(fields: [serverId], references: [id])
  message Message @relation(fields: [messageId], references: [id])
  creator User    @relation(fields: [creatorId], references: [id])
}

model Attachment {
  id        String   @id @db.VarChar
  userId    String   @db.VarChar
  messageId String?  @db.VarChar
  channelId String?  @db.VarChar
  createdAt DateTime @default(now())
  data      String?
  url       String?
  type      String

  // relations
  user    User     @relation(fields: [userId], references: [id])
  message Message? @relation(fields: [messageId], references: [id])
  channel Channel? @relation(fields: [channelId], references: [id])
}

model Reaction {
  id        String    @id @db.VarChar
  value     String    @unique
  keyword   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  // relations
  messageReactions MessageReaction[]
}

model MessageReaction {
  messageId  String    @db.VarChar
  creatorId  String    @db.VarChar
  reactionId String    @db.VarChar
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  // relations
  message  Message  @relation(fields: [messageId], references: [id])
  creator  User     @relation(fields: [creatorId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])

  @@id([messageId, creatorId, reactionId])
}

// @private

model Session {
  id        String   @id @db.VarChar
  expiresAt DateTime
  token     String   @db.VarChar
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.VarChar
  userAgent String?  @db.VarChar
  userId    String   @db.VarChar

  // relations
  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                    String    @id @db.VarChar
  accountId             String    @db.VarChar
  providerId            String    @db.VarChar
  userId                String    @db.VarChar
  accessToken           String?   @db.VarChar
  refreshToken          String?   @db.VarChar
  idToken               String?   @db.VarChar
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.VarChar
  password              String?   @db.VarChar
  createdAt             DateTime
  updatedAt             DateTime

  // relations
  user User @relation(fields: [userId], references: [id])
}

model Verification {
  id         String    @id @db.VarChar
  identifier String    @db.VarChar
  value      String    @db.VarChar
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model Jwks {
  id         String   @id @db.VarChar
  publicKey  String   @db.VarChar
  privateKey String   @db.VarChar
  createdAt  DateTime
}
