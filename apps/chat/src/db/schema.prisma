generator client {
  provider = "prisma-client-js"
}

generator zero {
  provider = "prisma-zero"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @db.VarChar
  username      String?  @db.VarChar(200)
  name          String?  @db.VarChar(200)
  email         String   @unique @db.VarChar(200)
  state         Json?    @default("{}")
  updatedAt     DateTime @default(now())
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())

  // relationships
  friendshipsRequested Friendship[]      @relation("requestingUser")
  friendshipsAccepted  Friendship[]      @relation("acceptingUser")
  attachments          Attachment[]
  servers              ServerMember[]
  UserRole             UserRole[]
  Message              Message[]
  MessageReaction      MessageReaction[]
  Session              Session[]
  Account              Account[]
}

model Friendship {
  requestingId String   @db.VarChar
  acceptingId  String   @db.VarChar
  accepted     Boolean  @default(false)
  createdAt    DateTime @default(now())

  // relationships
  requestingUser User @relation("requestingUser", fields: [requestingId], references: [id])
  acceptingUser  User @relation("acceptingUser", fields: [acceptingId], references: [id])

  @@id([requestingId, acceptingId])
}

model Server {
  id          String   @id @db.VarChar
  name        String   @db.VarChar(200)
  creatorId   String   @db.VarChar
  description String?
  channelSort Json?    @default("{}")
  icon        String?  @db.VarChar(255)
  createdAt   DateTime @default(now())

  // relationships
  members  ServerMember[]
  roles    Role[]
  channels Channel[]
  UserRole UserRole[]
  Message  Message[]
}

model ServerMember {
  serverId String   @db.VarChar
  userId   String   @db.VarChar
  joinedAt DateTime @default(now())

  // relationships
  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([serverId, userId])
}

model Role {
  id             String   @id @db.VarChar
  serverId       String   @db.VarChar
  name           String   @db.VarChar(200)
  color          String   @db.VarChar(200)
  canAdmin       Boolean  @default(false)
  canEditServer  Boolean  @default(false)
  canEditChannel Boolean  @default(false)
  createdAt      DateTime @default(now())

  // relationships
  server  Server     @relation(fields: [serverId], references: [id])
  members UserRole[]
}

model UserRole {
  serverId  String   @db.VarChar
  userId    String   @db.VarChar
  roleId    String   @db.VarChar
  granterId String   @db.VarChar
  createdAt DateTime @default(now())

  // relationships
  server Server @relation(fields: [serverId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([serverId, userId, roleId])
}

model Channel {
  id          String   @id @db.VarChar
  serverId    String   @db.VarChar
  name        String   @db.VarChar(200)
  description String?
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())

  // relationships
  server  Server    @relation(fields: [serverId], references: [id])
  threads Thread[]
  pins    Pin[]
  Message Message[]
}

model Thread {
  id          String   @id @db.VarChar
  channelId   String   @db.VarChar
  messageId   String?
  creatorId   String   @db.VarChar
  title       String?  @db.VarChar(200)
  deleted     Boolean  @default(false)
  description String?  @db.VarChar(200)
  createdAt   DateTime @default(now())

  // relationships
  channel Channel   @relation(fields: [channelId], references: [id])
  Message Message[]
}

model Message {
  id            String    @id @db.VarChar
  serverId      String    @db.VarChar
  channelId     String    @db.VarChar
  replyingToId  String?   @db.VarChar
  threadId      String?   @db.VarChar
  creatorId     String    @db.VarChar
  content       String
  isThreadReply Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deleted       Boolean   @default(false)

  // relationships
  server          Server            @relation(fields: [serverId], references: [id])
  channel         Channel           @relation(fields: [channelId], references: [id])
  thread          Thread?           @relation(fields: [threadId], references: [id])
  creator         User              @relation(fields: [creatorId], references: [id])
  replyingTo      Message?          @relation("MessageReplies", fields: [replyingToId], references: [id])
  replies         Message[]         @relation("MessageReplies")
  pins            Pin[]
  MessageReaction MessageReaction[]
}

model Pin {
  id        String   @id @db.VarChar
  channelId String   @db.VarChar
  serverId  String   @db.VarChar
  messageId String   @db.VarChar
  creatorId String   @db.VarChar
  createdAt DateTime @default(now())

  // relationships
  channel Channel @relation(fields: [channelId], references: [id])
  Message Message @relation(fields: [messageId], references: [id])
}

model Attachment {
  id        String   @id @db.VarChar
  userId    String   @db.VarChar
  messageId String?  @db.VarChar
  channelId String?  @db.VarChar
  type      String   @db.VarChar
  data      String?
  url       String?
  createdAt DateTime @default(now())

  // relationships
  user User @relation(fields: [userId], references: [id])
}

model Reaction {
  id        String    @id @db.VarChar
  value     String    @unique
  keyword   String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  // relationships
  messageReactions MessageReaction[]
}

model MessageReaction {
  messageId  String    @db.VarChar
  creatorId  String    @db.VarChar
  reactionId String    @db.VarChar
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  // relationships
  message  Message  @relation(fields: [messageId], references: [id])
  creator  User     @relation(fields: [creatorId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])

  @@id([messageId, creatorId, reactionId])
}

/// @tag("private")
model Session {
  id        String   @id @db.VarChar
  expiresAt DateTime
  token     String   @db.VarChar
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.VarChar
  userAgent String?  @db.VarChar
  userId    String   @db.VarChar

  // relationships
  user User @relation(fields: [userId], references: [id])
}

/// @tag("private")
model Account {
  id                    String    @id @db.VarChar
  accountId             String    @db.VarChar
  providerId            String    @db.VarChar
  userId                String    @db.VarChar
  accessToken           String?   @db.VarChar
  refreshToken          String?   @db.VarChar
  idToken               String?   @db.VarChar
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.VarChar
  password              String?   @db.VarChar
  createdAt             DateTime
  updatedAt             DateTime

  // relationships
  user User @relation(fields: [userId], references: [id])
}

/// @tag("private")
model Verification {
  id         String    @id @db.VarChar
  identifier String    @db.VarChar
  value      String    @db.VarChar
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

/// @tag("private")
model Jwks {
  id         String   @id @db.VarChar
  publicKey  String   @db.VarChar
  privateKey String   @db.VarChar
  createdAt  DateTime
}
